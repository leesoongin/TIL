# Tree

트리란?

- 그래프의 한 종류로서 사이클이 없는 하나의 연결 그래프라고도 할 수 있다.
- 노드와 간선으로 이루어진 자료 구조이다.
- 즉, 트리란 방향성이 있는 비 순환 그래프이다.

트리의 특징?

- 계층 구조로 이루어져 있다. → 계층적인 자료를 표현하는데 이용되는 자료구조
- 트리는 하나의 루트 노드를 가진다.
- 각각의 노드들은 부모 자식관계를 가지고, 노드는 하나 이상의 자식 노드를 가지고 있다
- 트리의 마지막 계층의 노드들을 leaf(잎사귀)라고 부른다.

1. 이진트리  (Binary Tree)
    - 별다른 조건 없이 Node의 자식 노드가 최대 2개씩만 붙어 있으면 이진트리

    ![Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__5.52.54.png](Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__5.52.54.png)

2. 이진탐색트리 (Binary Search Tree)
    - 자식노드가 존재 할 경우 왼쪽 노드들은 현재 값보다 작은 값을 가지고 있어야 하고, 오른쪽에는 큰 값을 가지고 있어야 한다.

    👍 조건을 성립하는 경우

    ![Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__5.55.03.png](Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__5.55.03.png)

    👎 조건을 성립하지 않을 경우

    ![Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__5.56.17.png](Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__5.56.17.png)

3. 완전 이진트리 (Complete Binary Tree)
    - 모든 노드들이 레벨(계층)별로 왼쪽부터 채워져 있으면 완전 이진 트리

    👍 조건을 성립하는 경우

    ![Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__5.57.51.png](Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__5.57.51.png)

    👎 조건을 성립하지 않을 경우

    ![Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__5.59.51.png](Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__5.59.51.png)

4. full 이진트리 (Full Binary Tree)
    - 어떤 노드가 자식을 가지고 있다면 둘다 가지고있어야하고,
    - 그 경우가 아니라면 아무것도 가지고 있지 않아야 한다

    👍 조건을 성립하는 경우

    ![Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__6.00.45.png](Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__6.00.45.png)

    👎 조건을 성립하지 않을 경우

    ![Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__6.01.07.png](Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__6.01.07.png)

5. Perfect Binary Tree
    - 마지막 계층을 제외하고 모든 노드가 자식 노드를 2개씩 가지고 있는 경우
    - 완전한 피라미드 형태

    👍 조건을 성립하는 경우

    ![Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__6.01.36.png](Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__6.01.36.png)

    👎 조건을 성립하지 않을 경우

    ![Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__6.02.07.png](Tree%201b29fdf273a144c28b0d360c268406f4/_2021-04-22__6.02.07.png)

기본적인 트리 구현 (파이썬 코드)

노드 객체 정의

```python
class Node:
	def __init__(self,value):
		self.value = value
		self.left = None
		self.right = None
```

트리 객체 정의

```python
class Tree:
	def __init__(self,root):
		self.root = root
	def push(self,value):
		node = Node(value = value)
		
```

보통 순회를 통해 트리를 구성하는 노드들을 탐색한다.

순회의 종류로는

### 전위 순회 (DLR)

### 중위 순회 (LDR)

### 후위 순회 (LRD)

**D: 현재 노드를 출력한다.**

**L:  현재 노드의 왼쪽 서브트리로 이동한다**

**R: 현재 노드의 오른쪽 서브트리로 이동한다**

순회는 나중에 따로 정리해보자.

참고자료 :  [https://www.youtube.com/watch?v=LnxEBW29DOw&t=0s](https://www.youtube.com/watch?v=LnxEBW29DOw&t=0s)
